%YAML 1.1
%TAG !u! tag:unity3d.com,2011:
--- !u!1 &8825951816242161230
GameObject:
  m_ObjectHideFlags: 0
  m_CorrespondingSourceObject: {fileID: 0}
  m_PrefabInstance: {fileID: 0}
  m_PrefabAsset: {fileID: 0}
  serializedVersion: 6
  m_Component:
  - component: {fileID: 8825951816242161229}
  - component: {fileID: 8825951816242161228}
  - component: {fileID: 8825951816242161231}
  m_Layer: 0
  m_Name: 'Operator Manual '
  m_TagString: Untagged
  m_Icon: {fileID: 0}
  m_NavMeshLayer: 0
  m_StaticEditorFlags: 0
  m_IsActive: 1
--- !u!4 &8825951816242161229
Transform:
  m_ObjectHideFlags: 0
  m_CorrespondingSourceObject: {fileID: 0}
  m_PrefabInstance: {fileID: 0}
  m_PrefabAsset: {fileID: 0}
  m_GameObject: {fileID: 8825951816242161230}
  m_LocalRotation: {x: 0, y: 0, z: 0, w: 1}
  m_LocalPosition: {x: 89.8756, y: 2.8615, z: 0}
  m_LocalScale: {x: 0.1, y: 0.1, z: 1}
  m_ConstrainProportionsScale: 0
  m_Children: []
  m_Father: {fileID: 0}
  m_RootOrder: 0
  m_LocalEulerAnglesHint: {x: 0, y: 0, z: 0}
--- !u!212 &8825951816242161228
SpriteRenderer:
  m_ObjectHideFlags: 0
  m_CorrespondingSourceObject: {fileID: 0}
  m_PrefabInstance: {fileID: 0}
  m_PrefabAsset: {fileID: 0}
  m_GameObject: {fileID: 8825951816242161230}
  m_Enabled: 1
  m_CastShadows: 0
  m_ReceiveShadows: 0
  m_DynamicOccludee: 1
  m_StaticShadowCaster: 0
  m_MotionVectors: 1
  m_LightProbeUsage: 1
  m_ReflectionProbeUsage: 1
  m_RayTracingMode: 0
  m_RayTraceProcedural: 0
  m_RenderingLayerMask: 1
  m_RendererPriority: 0
  m_Materials:
  - {fileID: 2100000, guid: a97c105638bdf8b4a8650670310a4cd3, type: 2}
  m_StaticBatchInfo:
    firstSubMesh: 0
    subMeshCount: 0
  m_StaticBatchRoot: {fileID: 0}
  m_ProbeAnchor: {fileID: 0}
  m_LightProbeVolumeOverride: {fileID: 0}
  m_ScaleInLightmap: 1
  m_ReceiveGI: 1
  m_PreserveUVs: 0
  m_IgnoreNormalsForChartDetection: 0
  m_ImportantGI: 0
  m_StitchLightmapSeams: 1
  m_SelectedEditorRenderState: 0
  m_MinimumChartSize: 4
  m_AutoUVMaxDistance: 0.5
  m_AutoUVMaxAngle: 89
  m_LightmapParameters: {fileID: 0}
  m_SortingLayerID: 0
  m_SortingLayer: 0
  m_SortingOrder: 0
  m_Sprite: {fileID: 21300000, guid: 3a073d6e7d03970489c884fc98a954f8, type: 3}
  m_Color: {r: 1, g: 1, b: 1, a: 1}
  m_FlipX: 0
  m_FlipY: 0
  m_DrawMode: 0
  m_Size: {x: 20.48, y: 20.48}
  m_AdaptiveModeThreshold: 0.5
  m_SpriteTileMode: 0
  m_WasSpriteAssigned: 1
  m_MaskInteraction: 0
  m_SpriteSortPoint: 0
--- !u!114 &8825951816242161231
MonoBehaviour:
  m_ObjectHideFlags: 0
  m_CorrespondingSourceObject: {fileID: 0}
  m_PrefabInstance: {fileID: 0}
  m_PrefabAsset: {fileID: 0}
  m_GameObject: {fileID: 8825951816242161230}
  m_Enabled: 1
  m_EditorHideFlags: 0
  m_Script: {fileID: 11500000, guid: 236512c4a3a49b54fb771f843d7601ac, type: 3}
  m_Name: 
  m_EditorClassIdentifier: 
  itemName: Operator_Manual
  itemDescription: 'The basics you want to know first is about Arithmetic operators 
    1. Addition `+` The addition operator is used to add two operands. It works with
    both numbers and characters. Example: int sum = 5 + 3 If you print out sum, the
    result will be 8 2. Subtraction `-` The subtraction operator is used to subtract
    the right operand from the left operand. Example: int difference = 7 - 4;  If
    you print out difference , the result will be 3 3. Multiplication `*` The multiplication
    operator is used to multiply two operands. int product = 6 * 2;   // product
    is 12 If you print out product , the result will be 12 4. Division `/` The division
    operator is used to divide the left operand by the right operand. Note that if
    both operands are integers, the result will be an integer (the fractional part
    is truncated). Example: int Div = 10 / 3; If you print out Div , the result will
    be 3 (originally 3.33 but truncated) 5. Modulus `%` The modulus operator gives
    the remainder when the left operand is divided by the right operand. Example:
    int remainder = 10 % 3;   // remainder is 1 If you print out remainder , the
    result will be 1  Order of operations When using multiple operators in the same
    operations, the computer will choose which operator will perform first. The priorities
    are as follows from top to bottom 1. Parentheses `()` 2. Postfix `++`, `--` 3.
    Multiplication `*`, Division `/`, Modulus `%` 4. Addition `+`, Subtraction `-`
    5. Relational `<`, `<=`, `>`, `>=` 6. Equality `==`, `!=``  Relational Operators 
    1. Equal to `==` The equal to operator checks if the left operand is equal to
    the right operand. If true, it returns 1; otherwise, it returns 0. Example: int
    a = 5, b = 5; if (a == b) {     //true, since a is equal to b } 2. Not equal
    to `!=` The not equal to operator checks if the left operand is not equal to
    the right operand. If true, it returns 1; otherwise, it returns 0. Example: int
    a = 5, b = 3; if (a != b) {     // true, since a is not equal to b } 3. Less
    than `<` The less than operator checks if the left operand is less than the right
    operand. If true, it returns 1; otherwise, it returns 0. Example: int a = 3,
    b = 5; if (a < b) {     // true, since a is less than b } 4. Greater than `>`
    The greater than operator checks if the left operand is greater than the right
    operand. If true, it returns 1; otherwise, it returns 0. Example: int a = 7,
    b = 5; if (a > b) {     // true, since a is greater than b } 5. Less than or
    equal to `<=` The less than or equal to operator checks if the left operand is
    less than or equal to the right operand. If true, it returns 1; otherwise, it
    returns 0. Example: int a = 5, b = 5; if (a <= b) {     // true, since a is less
    than or equal to b } 6. Greater than or equal to `>=` The greater than or equal
    to operator checks if the left operand is greater than or equal to the right
    operand. If true, it returns 1; otherwise, it returns 0. Example: int a = 5,
    b = 3; if (a >= b) {     // true, since a is greater than or equal to b }  Increment
    and Decrement Operators 1. Increment `++` The increment operator increases the
    value of the operand by 1. Example: int a = 5; a++;   // After this, a is 6 
    2. Decrement `--` The decrement operator decreases the value of the operand by
    1. Example: int b = 8; b--;   // After this, b is 7 '
  pic: {fileID: 21300000, guid: 3a073d6e7d03970489c884fc98a954f8, type: 3}
